Script started on Thu 29 Sep 2016 03:10:32 AM EDT
]0;brookecantwell@storm:~/CISC2200/HW2[brookecantwell@storm HW2]$ cat maze.h
/*
 * Brooke Cantwell
 *
 * Data Structures
 *
 * Maze Class Header File
 *
 */

#ifndef MAZE_H
#define MAZE_H

#include <iostream>

using namespace std;

class Maze 
{
   //global functions
   //operator overload functions
   friend istream& operator>>(istream&, Maze&);
   friend ostream& operator<<(ostream&, Maze);

   public:
      void set_character(char, int, int);
      int solve(int, int);
   protected:
      int recursive_solve(int, int); 
      void input(istream&);
      void output(ostream&);
      static const int SIZE = 10;
      char Cells[SIZE][SIZE];
};

#endif
]0;brookecantwell@storm:~/CISC2200/HW2[brookecantwell@storm HW2]$ cat maze.cpp
/*
 * Brooke Cantwell
 *
 * CISC2200 Data Structures
 *
 * Maze Class Implementation File
 *
 */

#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include "maze.h"

using namespace std;

//GLOBAL METHODS

//operator overload methods for input & output

istream& operator>>(istream&in, Maze&m)
{
   m.input(in);
   return(in);
}

ostream& operator<<(ostream&out, Maze m)
{
   m.output(out);
   return(out);
}

//intput and output methods
void  Maze::input(istream&in)
{
   int row, col;
   

   for (row = 0; row < SIZE; row++) 
   {
      for (col = 0; col < SIZE; col++)
         in >> Cells[row][col];
   }
}

void Maze::output(ostream&out)
{
   #define LARGE_SQUARE "\u25A0";
   #define SMALL_SQUARE "\u25AB";
   #define TRIANGLE "\u25B2";
   #define BLANK " ";
   #define FOOTPRINT "\u25CB";

   int row, col;
   char var;

   cout << setw(3) << " ";

   for (int i = 0; i < SIZE; i++)
      cout << left << setw(3) << i;

   cout << endl;

   for (row = 0; row < SIZE; row++)
   {
      cout << setw(3) << row ;

      for (col = 0; col < SIZE; col++) {
         var = Cells[row][col];
         switch(var)
         {
            case 'n':
               cout << setw(5) << BLANK;
               break;
            case 'w':
               cout << setw(5) << LARGE_SQUARE;
               break;
            case 's':
               cout << setw(5) << SMALL_SQUARE;
               break;
            case 't': //entry & exit (at beginning)
//            case 'o': //entry after being reset
               cout << setw(5) << TRIANGLE;
               break;
            case 'f':
               cout << setw(5) << FOOTPRINT;
               break;
         }

      }
   cout << endl;
   }
}

//set_character( ) method, used to differentiate
//the maze entrance from exit after user input
//for enterance coordinates
void Maze::set_character(char c, int x, int y)
{
   Cells[x][y] = c;   
}

//wrapper method for recursive_solve( ) method
int Maze::solve(int x, int y)
{
   int success;

   success = recursive_solve(x, y);

   //mark the last spot visitied if it is successful
   //with a triangle isntead of a footprint
   if (success > 0)
      Cells[x][y] = 't';   
}

//recursive_solve( ) method, finds maze path
int Maze::recursive_solve(int x, int y)
{
   int success = 0;
   
   switch(Cells[x][y])
   {
      case 't': //exit
         success = 1;
         break;
      case 'w': //wall
         success = 0;
         break;
      case 'f': //footprint
         success = 0;
         break;
      default:
         Cells[x][y] = 'f'; //footprint
         if (x == 0)
            success = recursive_solve(x + 1, y);
         else
            success = recursive_solve(x + 1, y) || recursive_solve(x - 1, y) || recursive_solve(x, y + 1) || recursive_solve(x, y - 1);
         break;
   }

   if (success > 0)
      cout << '(' << x << ", " << y << ')' << endl;


   return(success);
}
]0;brookecantwell@storm:~/CISC2200/HW2[brookecantwell@storm HW2]$ cat labirynth.cpp
/*
 * Brooke Cantwell
 *
 * CISC2200 Data Structures
 *
 * Homework #2
 *
 * 29 September 2016
 *
 */

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <iomanip>
#include "maze.h"

using namespace std;

//global variables
const int SIZE = 10;
const char SENTINEL = 0;

//function prototypes
bool read_maze(int&, int&, Maze&);
void print_vector(vector<vector<char>>);

main( ) 
{

   //local variables
   Maze this_maze;
   vector <vector<char>> v;	
   int x, y;
   bool file_open = false;
   int success = 0;

   //open and read from file, if there is an error
   //opening the file, prompt the user to input
   //the file name again
   while(!file_open)
      file_open = read_maze(x, y, this_maze);


   while (success < 1)
      success = this_maze.solve(x, y);

   //output
   cout << endl << "Labirynth:" << endl;  
   cout << this_maze << endl;

}

//get data file name, open and read from data file, and get
//starting coordinates, return false if file does not open
bool read_maze(int&x, int&y, Maze&this_maze)
{
   string file_name;
   char c;
   bool file_open;

   cout << "Enter file name: ";
   cin >> file_name;

   ifstream data_file(file_name);

   //if file doesn't open display error message
   //and set file_open to false
   if (!data_file.is_open( ))
   {
      cout << "Error opening file." << endl;
      file_open = false;
   }
   //if the file is open, read in data, get
   //user input for entry point, and make sure
   //user input values do not exceed the size
   else
   {
      file_open = true;  
      data_file >> this_maze;
      data_file.close( );

      cout << this_maze << endl;

      do 
      {
         cout << "Enter entry point coordinates in the form x,y: ";
         cin >> x >> c >> y;
      } while (x > SIZE || y > SIZE);

      //set entrance to a different character to prevent the
      //program from falsely thinking it's reached the exit
      this_maze.set_character('o', x, y);   

   }

   return(file_open);
}
]0;brookecantwell@storm:~/CISC2200/HW2[brookecantwell@storm HW2]$ cat labirynth.make
labirynth: labirynth.o maze.o
	g++ -o labirynth labirynth.o maze.o
driver.o: labirynth.cpp maze.h
	g++ -c labirynth.cpp
maze.o: maze.cpp maze.h
	g++ -c maze.cpp
clean:
	rm -f *.o *~ ./#*#
]0;brookecantwell@storm:~/CISC2200/HW2[brookecantwell@storm HW2]$ ./labirynth
Enter file name: maze-1.dat
   0  1  2  3  4  5  6  7  8  9  
0  â–   â–   â–   â–   â–²  â–   â–   â–   â–   â–   
1  â–   â–   â–   â–   â–«  â–«  â–   â–   â–   â–   
2  â–   â–   â–«  â–«  â–«  â–   â–   â–   â–   â–   
3  â–   â–   â–   â–«  â–«  â–«  â–   â–   â–   â–   
4  â–   â–   â–   â–   â–   â–«  â–«  â–   â–   â–   
5  â–   â–   â–   â–   â–   â–«  â–«  â–«  â–   â–   
6  â–   â–   â–   â–   â–«  â–«  â–   â–   â–   â–   
7  â–   â–   â–   â–   â–   â–«  â–«  â–   â–   â–   
8  â–   â–   â–   â–   â–   â–   â–«  â–«  â–   â–   
9  â–   â–   â–   â–   â–   â–   â–²  â–   â–   â–   

Enter entry point coordinates in the form x,y: 0,4
(9, 6)
(8, 6)
(7, 6)
(7, 5)
(6, 5)
(5, 5)
(4, 5)
(3, 5)
(3, 4)
(2, 4)
(1, 4)
(0, 4)

Labirynth:
   0  1  2  3  4  5  6  7  8  9  
0  â–   â–   â–   â–   â–²  â–   â–   â–   â–   â–   
1  â–   â–   â–   â–   â—‹  â–«  â–   â–   â–   â–   
2  â–   â–   â–«  â–«  â—‹  â–   â–   â–   â–   â–   
3  â–   â–   â–   â–«  â—‹  â—‹  â–   â–   â–   â–   
4  â–   â–   â–   â–   â–   â—‹  â–«  â–   â–   â–   
5  â–   â–   â–   â–   â–   â—‹  â–«  â–«  â–   â–   
6  â–   â–   â–   â–   â–«  â—‹  â–   â–   â–   â–   
7  â–   â–   â–   â–   â–   â—‹  â—‹  â–   â–   â–   
8  â–   â–   â–   â–   â–   â–   â—‹  â–«  â–   â–   
9  â–   â–   â–   â–   â–   â–   â–²  â–   â–   â–   

]0;brookecantwell@storm:~/CISC2200/HW2[brookecantwell@storm HW2]$ exit
exit

Script done on Thu 29 Sep 2016 03:11:06 AM EDT
